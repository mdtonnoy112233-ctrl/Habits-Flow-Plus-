// src/App.jsx
import React, { useEffect, useState, useRef, useCallback } from "react";
import jsPDF from "jspdf";

/*
Web Habit Flow+ - single-file App.jsx
Requires: Tailwind CSS for styling (optional but recommended)
Install: npm install jspdf
Admin quick-login: fallback password = "ownerpass123"
To change admin password at build time (Vite): set VITE_ADMIN_PASS in .env
*/

const STORAGE_KEY = "habitflowplus_web_v1";
const USERS_KEY = "habitflowplus_users_v1";
const FALLBACK_ADMIN_PASS = "ownerpass123";
const ADMIN_PASS = import.meta?.env?.VITE_ADMIN_PASS || FALLBACK_ADMIN_PASS;

const beepBase64 = "data:audio/wav;base64,UklGRhQAAABXQVZFZm10IBIAAAABAAEAQB8AAIA+AAACABAAZGF0YQAAAAA=";

const sleep = (ms) => new Promise((r) => setTimeout(r, ms));
const todayKey = () => new Date().toISOString().slice(0, 10);

function loadJSON(key, fallback) {
  try {
    const raw = localStorage.getItem(key);
    if (!raw) return fallback;
    return JSON.parse(raw);
  } catch {
    return fallback;
  }
}
function saveJSON(key, data) {
  try {
    localStorage.setItem(key, JSON.stringify(data));
  } catch {}
}

function defaultData() {
  return { habits: [], courses: [], usersPremium: {}, darkMode: false, createdAt: new Date().toISOString() };
}

// small helper to id
const id = (p) => `${p}-${Date.now()}-${Math.floor(Math.random()*1000)}`;

// Notifications helper
const requestNotification = async () => {
  if (typeof Notification === "undefined") return "unsupported";
  if (Notification.permission === "default") return await Notification.requestPermission();
  return Notification.permission;
};

// UI components (small)
function Notify({ text }) {
  if (!text) return null;
  return (
    <div className="fixed bottom-6 left-1/2 transform -translate-x-1/2 bg-indigo-600 text-white px-4 py-2 rounded shadow z-50">
      {text}
    </div>
  );
}

function AdBanner() {
  return (
    <div className="w-full p-3 bg-yellow-200 text-yellow-900 rounded text-center mb-4">
      Ads shown for free users — upgrade to Premium to remove ads.
    </div>
  );
}

// Main app
export default function App() {
  // state
  const [data, setData] = useState(() => loadJSON(STORAGE_KEY, defaultData()));
  const [users, setUsers] = useState(() => loadJSON(USERS_KEY, {}));
  const [currentUser, setCurrentUser] = useState(null);
  const [ownerPassInput, setOwnerPassInput] = useState("");
  const [isOwner, setIsOwner] = useState(false);
  const [view, setView] = useState("today"); // today/calendar/courses/admin
  const [notif, setNotif] = useState("");
  const [audioEnabled, setAudioEnabled] = useState(false);
  const audioRef = useRef(null);
  const [askNotify, setAskNotify] = useState(false);

  // Auth simple demo (client-only hashed storage isn't production safe)
  useEffect(() => {
    saveJSON(STORAGE_KEY, data);
  }, [data]);

  useEffect(() => {
    saveJSON(USERS_KEY, users);
  }, [users]);

  // Dark mode apply
  useEffect(() => {
    document.documentElement.classList.toggle("dark", !!data.darkMode);
  }, [data.darkMode]);

  // Helper utility: compute streak for habit
  function computeStreak(habit) {
    let s = 0;
    for (let i = 0; i < 365; i++) {
      const d = new Date();
      d.setDate(d.getDate() - i);
      const k = d.toISOString().slice(0, 10);
      if (habit.completed && habit.completed[k]) s++;
      else break;
    }
    return s;
  }

  // Toggle habit completion
  async function toggleHabit(hid, key = todayKey()) {
    const habits = data.habits.map((h) => {
      if (h.id !== hid) return h;
      const completed = { ...(h.completed || {}) };
      if (completed[key]) delete completed[key];
      else completed[key] = true;
      return { ...h, completed };
    });
    const nd = { ...data, habits };
    setData(nd);
    if (!askNotify) {
      await requestNotification();
      setAskNotify(true);
    }
    if (Notification.permission === "granted") {
      new Notification("Habit updated", { body: "Nice — you updated a habit." });
    }
    if (audioEnabled) audioRef.current?.play();
  }

  // Add habit
  function addHabit(name, frequency = "daily") {
    if (!name?.trim()) return;
    const habit = { id: id("h"), name: name.trim(), frequency, createdAt: new Date().toISOString(), completed: {} };
    setData({ ...data, habits: [...data.habits, habit] });
    setNotif("Habit added");
    setTimeout(() => setNotif(""), 2500);
  }
  // Edit/Delete
  function deleteHabit(hid) {
    if (!confirm("Delete habit?")) return;
    setData({ ...data, habits: data.habits.filter((h) => h.id !== hid) });
  }
  function editHabit(hid, patch) {
    setData({ ...data, habits: data.habits.map((h) => (h.id === hid ? { ...h, ...patch } : h)) });
  }

  // Courses
  function addCourse(name) {
    if (!name?.trim()) return;
    const course = { id: id("c"), name: name.trim(), lessons: [], createdAt: new Date().toISOString() };
    setData({ ...data, courses: [...data.courses, course] });
    setNotif("Course added");
    setTimeout(() => setNotif(""), 2500);
  }
  function addLesson(courseId, title) {
    if (!title?.trim()) return;
    const courses = data.courses.map((c) => {
      if (c.id !== courseId) return c;
      return { ...c, lessons: [...c.lessons, { id: id("l"), title: title.trim(), completed: false }] };
    });
    setData({ ...data, courses });
  }

  function toggleLesson(courseId, lessonId) {
    const courses = data.courses.map((c) => {
      if (c.id !== courseId) return c;
      return { ...c, lessons: c.lessons.map((l) => (l.id === lessonId ? { ...l, completed: !l.completed } : l)) };
    });
    setData({ ...data, courses });
  }

  // Export PDF using jsPDF
  function exportCourseToPdf(course) {
    const doc = new jsPDF();
    doc.setFontSize(16);
    doc.text(`Course: ${course.name}`, 10, 20);
    doc.setFontSize(12);
    course.lessons.forEach((lesson, i) => {
      doc.text(`${i + 1}. ${lesson.title} - ${lesson.completed ? "✅" : "⬜"}`, 10, 30 + i * 8);
    });
    doc.save(`${course.name}_progress.pdf`);
  }

  // Export / Import JSON
  function exportData() {
    const blob = new Blob([JSON.stringify(data, null, 2)], { type: "application/json" });
    const a = document.createElement("a");
    a.href = URL.createObjectURL(blob);
    a.download = "habitflowplus_export.json";
    a.click();
  }
  function importData(ev) {
    const f = ev.target.files?.[0];
    if (!f) return;
    const r = new FileReader();
    r.onload = (e) => {
      try {
        const j = JSON.parse(e.target.result);
        if (j.habits && j.courses) {
          setData(j);
          setNotif("Imported data");
          setTimeout(() => setNotif(""), 2500);
        } else alert("Invalid format");
      } catch {
        alert("Parse error");
      }
    };
    r.readAsText(f);
  }

  // Premium purchase mock
  async function purchase(type = "monthly") {
    if (!currentUser) return alert("Login first");
    // simulate
    await sleep(800);
    const expires = type === "monthly" ? new Date(Date.now() + 30*86400000) : new Date(Date.now() + 365*86400000);
    const up = { ...(data.usersPremium||{}), [currentUser.email]: { type, expires: expires.toISOString(), active: true } };
    setData({ ...data, usersPremium: up });
    setNotif("Premium activated");
    setTimeout(() => setNotif(""), 3000);
  }

  // Admin quick login
  function ownerLogin() {
    if (ownerPassInput === ADMIN_PASS) {
      setIsOwner(true);
      setOwnerPassInput("");
      setNotif("Owner mode");
      setTimeout(() => setNotif(""), 2000);
    } else alert("Wrong owner password");
  }

  // Admin functions: view users (client-only; users stored in local users object)
  function toggleUserPremium(email) {
    const up = { ...(data.usersPremium || {}) };
    if (up[email] && up[email].active) delete up[email];
    else up[email] = { type: "manual", expires: new Date(Date.now()+30*86400000).toISOString(), active: true };
    setData({ ...data, usersPremium: up });
  }

  // Small UI helpers & sample default fill
  useEffect(() => {
    if (!data.habits.length && !data.courses.length) {
      // sample starter content (only first run)
      const sample = {
        habits: [
          { id: id("h"), name: "Morning stretch", frequency: "daily", createdAt: new Date().toISOString(), completed: {} },
          { id: id("h"), name: "Read 15m", frequency: "daily", createdAt: new Date().toISOString(), completed: {} },
        ],
        courses: [
          { id: id("c"), name: "Intro to Mindfulness", lessons: [{ id: id("l"), title: "Breathing basics", completed: false }], createdAt: new Date().toISOString() }
        ],
        usersPremium: data.usersPremium || {},
        darkMode: data.darkMode || false
      };
      if (data.createdAt) setData((d) => ({ ...d, ...sample }));
    }
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, []);

  const isPremium = currentUser && data.usersPremium && data.usersPremium[currentUser.email] && data.usersPremium[currentUser.email].active;

  // small components for pages
  function TodayPage() {
    return (
      <div>
        <h2 className="text-2xl font-semibold mb-3">Today</h2>
        {!isPremium && <AdBanner/>}
        <div className="grid gap-4 md:grid-cols-2">
          <div className="p-3 border rounded bg-white dark:bg-gray-800">
            <h3 className="font-semibold mb-2">Habits</h3>
            {data.habits.length===0 && <p>No habits yet</p>}
            <ul className="space-y-2">
              {data.habits.map((h) => {
                const completed = !!(h.completed && h.completed[todayKey()]);
                return (
                  <li key={h.id} className="flex justify-between items-center p-2 rounded border bg-gray-50 dark:bg-gray-700">
                    <div>
                      <div className={`font-medium ${completed ? 'line-through text-green-600' : ''}`}>{h.name}</div>
                      <div className="text-xs text-gray-500">Streak: {computeStreak(h)}</div>
                    </div>
                    <div className="space-x-2">
                      <button onClick={() => toggleHabit(h.id)} className={`px-3 py-1 rounded ${completed ? 'bg-red-500 text-white' : 'bg-green-600 text-white'}`}>{completed ? 'Undo' : 'Done'}</button>
                      <button onClick={() => { if (confirm('Delete habit?')) deleteHabit(h.id) }} className="px-2 py-1 text-red-600">×</button>
                    </div>
                  </li>
                );
              })}
            </ul>
            <AddHabitForm onAdd={(n,f)=>addHabit(n,f)} />
          </div>

          <div className="p-3 border rounded bg-white dark:bg-gray-800">
            <h3 className="font-semibold mb-2">Today’s Courses</h3>
            {data.courses.length===0 && <p>No courses</p>}
            <ul className="space-y-2">
              {data.courses.map((c) => (
                <li key={c.id} className="p-2 border rounded bg-gray-50 dark:bg-gray-700">
                  <div className="flex justify-between items-center">
                    <div>
                      <div className="font-medium">{c.name}</div>
                      <div className="text-xs text-gray-500">{c.lessons.length} lessons</div>
                    </div>
                    <div className="space-x-2">
                      <button onClick={() => exportCourseToPdf(c)} className="px-3 py-1 bg-indigo-600 text-white rounded">Export</button>
                    </div>
                  </div>
                  <ul className="mt-2 space-y-1">
                    {c.lessons.map((l)=>(
                      <li key={l.id} className="flex justify-between items-center">
                        <span className={`cursor-pointer ${l.completed? 'line-through text-green-700' : ''}`} onClick={()=>toggleLesson(c.id,l.id)}>{l.title}</span>
                        <button onClick={()=>toggleLesson(c.id,l.id)} className="px-2 py-1 text-sm rounded bg-gray-200 dark:bg-gray-600">{l.completed? 'Undo':'Mark'}</button>
                      </li>
                    ))}
                  </ul>
                  <AddLessonForm onAdd={(title)=>addLesson(c.id,title)} />
                </li>
              ))}
            </ul>
          </div>
        </div>
      </div>
    );
  }

  function AddHabitForm({ onAdd }) {
    const [name, setName] = useState("");
    const [freq, setFreq] = useState("daily");
    return (
      <div className="mt-3">
        <input value={name} onChange={(e)=>setName(e.target.value)} placeholder="New habit" className="w-full p-2 border rounded mb-2 bg-white dark:bg-gray-700" />
        <div className="flex gap-2">
          <select value={freq} onChange={(e)=>setFreq(e.target.value)} className="p-2 border rounded bg-white dark:bg-gray-700">
            <option value="daily">Daily</option>
            <option value="weekly">Weekly</option>
          </select>
          <button onClick={()=>{ onAdd(name,freq); setName(""); }} className="px-3 py-1 bg-green-600 text-white rounded">Add</button>
        </div>
      </div>
    );
  }

  function AddLessonForm({ onAdd }) {
    const [t,setT] = useState("");
    return (
      <div className="mt-2 flex gap-2">
        <input value={t} onChange={(e)=>setT(e.target.value)} placeholder="Lesson title" className="flex-1 p-2 border rounded bg-white dark:bg-gray-700" />
        <button onClick={()=>{ onAdd(t); setT(""); }} className="px-3 py-1 bg-blue-600 text-white rounded">Add</button>
      </div>
    );
  }

  // Admin view
  function AdminView() {
    const userList = Object.keys(users).map((e) => users[e]);
    return (
      <div>
        <h2 className="text-2xl font-semibold mb-3">Admin Panel</h2>
        <div className="mb-3 p-3 border rounded bg-white dark:bg-gray-800">
          <h3 className="font-semibold">Premium Users</h3>
          <ul>
            {Object.entries(data.usersPremium||{}).length===0 && <li>No premium users</li>}
            {Object.entries(data.usersPremium||{}).map(([email,sub]) => (
              <li key={email} className="flex justify-between items-center border-b py-2">
                <div><div className="font-medium">{email}</div><div className="text-xs text-gray-500">Type: {sub.type}</div></div>
                <div className="text-sm">{new Date(sub.expires).toLocaleDateString()}</div>
              </li>
            ))}
          </ul>
          <div className="mt-3">
            <h4 className="font-semibold">All registered users (client-demo)</h4>
            {userList.length===0 && <p>No registered users</p>}
            <ul>
              {userList.map(u=>(
                <li key={u.email} className="flex justify-between items-center py-1">
                  <div><div className="font-medium">{u.name}</div><div className="text-xs text-gray-500">{u.email}</div></div>
                  <button onClick={()=>toggleUserPremium(u.email)} className="px-2 py-1 bg-indigo-600 text-white rounded">Toggle Premium</button>
                </li>
              ))}
            </ul>
          </div>
        </div>
      </div>
    );
  }

  // Simple login/signup (client only)
  function AuthPanel() {
    const [mode, setMode] = useState("login");
    const [email, setEmail] = useState("");
    const [pw, setPw] = useState("");
    const [name, setName] = useState("");
    async function signup() {
      if (!email || !name) return alert("Provide name and email");
      // store user in client users object
      const u = { name, email, createdAt: new Date().toISOString() };
      setUsers((s)=>({...s, [email]: u}));
      setCurrentUser({ name, email });
      setNotif("Account created (demo)");
      setTimeout(()=>setNotif(""),2500);
    }
    async function login() {
      if (!users[email]) return alert("No such demo user. Create account first.");
      setCurrentUser({ name: users[email].name, email });
    }
    return (
      <div className="max-w-md mx-auto p-4 bg-white dark:bg-gray-800 rounded shadow">
        <h2 className="text-xl font-bold mb-2">{mode==="login" ? "Log in" : "Sign up"}</h2>
        {mode==="signup" && <input value={name} onChange={(e)=>setName(e.target.value)} placeholder="Name" className="w-full p-2 border rounded mb-2 bg-white dark:bg-gray-700" />}
        <input value={email} onChange={(e)=>setEmail(e.target.value)} placeholder="Email" className="w-full p-2 border rounded mb-2 bg-white dark:bg-gray-700" />
        <input value={pw} onChange={(e)=>setPw(e.target.value)} placeholder="Password (not used in demo)" className="w-full p-2 border rounded mb-2 bg-white dark:bg-gray-700" />
        <div className="flex gap-2">
          {mode==="login" ? <button onClick={login} className="px-3 py-2 bg-blue-600 text-white rounded">Login</button> : <button onClick={signup} className="px-3 py-2 bg-green-600 text-white rounded">Create</button>}
          <button onClick={()=>setMode(mode==="login"?"signup":"login")} className="px-3 py-2 border rounded">Switch</button>
        </div>

        <div className="mt-3">
          <div className="text-xs text-gray-600">Owner? Enter pass here:</div>
          <div className="flex gap-2 mt-1">
            <input value={ownerPassInput} onChange={(e)=>setOwnerPassInput(e.target.value)} type="password" placeholder="Owner password" className="flex-1 p-2 border rounded bg-white dark:bg-gray-700" />
            <button onClick={ownerLogin} className="px-3 py-2 bg-yellow-400 rounded">Owner Login</button>
          </div>
          <div className="text-xs text-gray-500 mt-2">Quick admin demo password: <span className="font-mono">ownerpass123</span></div>
        </div>
      </div>
    );
  }

  // main render
  return (
    <div className={`min-h-screen p-4 ${data.darkMode ? "dark bg-gray-900 text-white":"bg-gray-50 text-gray-900"}`}>
      <audio ref={audioRef} src={beepBase64} preload="auto" />
      <div className="max-w-5xl mx-auto">
        <header className="flex justify-between items-center mb-4">
          <h1 className="text-3xl font-bold">Habit Flow+</h1>
          <div className="flex gap-2 items-center">
            <button onClick={()=>setData({...data, darkMode: !data.darkMode})} className="px-3 py-2 border rounded">{data.darkMode ? "🌙" : "☀️"}</button>
            <div>
              {currentUser ? (
                <div className="text-sm">Signed in: <b>{currentUser.name}</b> <span className="text-xs text-gray-500">({currentUser.email})</span></div>
              ): <div className="text-sm text-gray-500">Not signed in</div>}
            </div>
            <select value={view} onChange={(e)=>setView(e.target.value)} className="p-2 border rounded bg-white dark:bg-gray-800">
              <option value="today">Today</option>
              <option value="calendar">Calendar</option>
              <option value="courses">Courses</option>
              {isOwner && <option value="admin">Admin</option>}
            </select>
            <div>
              <button onClick={()=>{exportData()}} className="px-3 py-2 bg-indigo-600 text-white rounded ml-2">Export JSON</button>
              <input id="importFile" type="file" accept="application/json" onChange={importData} className="hidden" />
              <button onClick={()=>document.getElementById("importFile").click()} className="px-3 py-2 border rounded ml-2">Import</button>
            </div>
          </div>
        </header>

        {!currentUser && !isOwner && <AuthPanel />}

        {currentUser && (
          <div className="space-y-6">
            {view==='today' && <TodayPage />}
            {view==='calendar' && <div><h2 className="text-2xl font-semibold mb-3">Calendar (7 days)</h2><CalendarView data={data} toggleHabit={toggleHabit} /></div>}
            {view==='courses' && <div><h2 className="text-2xl font-semibold mb-3">Courses</h2><CoursesView data={data} addCourse={addCourse} addLesson={addLesson} exportCourseToPdf={exportCourseToPdf} toggleLesson={toggleLesson} /></div>}
          </div>
        )}

        {isOwner && view==='admin' && <AdminView />}

        {!currentUser && !isOwner && <div className="mt-6 text-sm text-gray-500">Tip: create a demo account to try features or use owner quick-login (password: ownerpass123)</div>}

        <footer className="mt-10 text-xs text-gray-500">Habit Flow+ demo — local-only. For production, add a backend (auth, db, payments).</footer>

      </div>
      <Notify text={notif} />
    </div>
  );
}

/* Helper subcomponents used in render */
function CalendarView({ data, toggleHabit }) {
  const days = [];
  const today = new Date();
  for (let i=6; i>=0; i--) {
    const d = new Date(today);
    d.setDate(d.getDate()-i);
    days.push(d);
  }
  return (
    <div className="overflow-x-auto">
      <table className="w-full table-fixed border">
        <thead><tr><th>Habit</th>{days.map(d=> <th key={d.toISOString()} className="text-center">{d.toLocaleDateString(undefined,{weekday:'short'})}<br/>{d.getDate()}</th>)}</tr></thead>
        <tbody>
          {data.habits.map(h => (
            <tr key={h.id}><td className="p-2 border">{h.name}</td>{days.map(d=>{
              const k=d.toISOString().slice(0,10);
              const completed = !!(h.completed && h.completed[k]);
              return <td key={k} className={`p-2 text-center border ${completed? 'bg-green-300':''}`} onClick={()=>toggleHabit(h.id,k)}>{completed ? '✓':''}</td>;
            })}</tr>
          ))}
        </tbody>
      </table>
    </div>
  );
}

function CoursesView({ data, addCourse, addLesson, exportCourseToPdf, toggleLesson }) {
  const [name,setName] = useState("");
  return (
    <div>
      <div className="mb-3 flex gap-2">
        <input value={name} onChange={e=>setName(e.target.value)} placeholder="New course" className="p-2 border rounded bg-white dark:bg-gray-700" />
        <button onClick={()=>{addCourse(name); setName("")}} className="px-3 py-1 bg-green-600 text-white rounded">Add Course</button>
      </div>
      <ul className="space-y-3">
        {data.courses.map(c => (
          <li key={c.id} className="p-3 border rounded bg-white dark:bg-gray-800">
            <div className="flex justify-between items-center mb-2">
              <div><div className="font-semibold">{c.name}</div><div className="text-xs text-gray-500">{c.lessons.length} lessons</div></div>
              <div className="flex gap-2">
                <button onClick={()=>exportCourseToPdf(c)} className="px-3 py-1 bg-indigo-600 text-white rounded">Export PDF</button>
              </div>
            </div>
            <ul className="space-y-1">
              {c.lessons.map(l=>(
                <li key={l.id} className="flex justify-between items-center">
                  <span className={`${l.completed ? 'line-through text-green-700' : ''}`}>{l.title}</span>
                  <div className="flex gap-2">
                    <button onClick={()=>toggleLesson(c.id,l.id)} className="px-2 py-1 border rounded">{l.completed ? 'Undo' : 'Done'}</button>
                  </div>
                </li>
              ))}
            </ul>
            <div className="mt-2">
              <AddLessonInline onAdd={(t)=>addLesson(c.id,t)} />
            </div>
          </li>
        ))}
      </ul>
    </div>
  );
}

function AddLessonInline({ onAdd }) {
  const [v, setV] = useState("");
  return (
    <div className="flex gap-2">
      <input value={v} onChange={(e)=>setV(e.target.value)} placeholder="Lesson title" className="flex-1 p-2 border rounded bg-white dark:bg-gray-700" />
      <button onClick={()=>{ if (v.trim()) { onAdd(v.trim()); setV(""); }}} className="px-3 py-1 bg-blue-600 text-white rounded">Add</button>
    </div>
  );
}
